<?php

namespace App\Filament\TenantPortfolio\Resources;

use App\Enums\IndicatorComplianceTypeEnum;
use App\Enums\IndicatorLevelEnum;
use App\Filament\Forms\Components\IndicatorSharedFields;
use App\Filament\TenantPortfolio\Resources\IndicatorComplianceResource\Pages;
use App\Filament\TenantPortfolio\Resources\IndicatorComplianceResource\RelationManagers\ProgrammesRelationManager;
use App\Models\IndicatorCompliance;
use App\Models\Role;
use Filament\Forms;
use Filament\Forms\Components\Section;
use Filament\Forms\Form;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletingScope;
use Illuminate\Support\Str;

class IndicatorComplianceResource extends Resource
{
    protected static ?string $model = IndicatorCompliance::class;

    protected static ?string $navigationIcon = 'heroicon-o-briefcase';

    protected static ?string $modelLabel = 'Compliance Indicator';

    protected static ?string $navigationGroup = 'Indicators';

    protected static ?int $navigationSort = 2;

    /**
     * Used to determine if the indicator is a portfolio or cluster indicator.
     * This controls logic in the form and table methods, as this class is extended for the ESO dashboard.
     */
    protected static IndicatorLevelEnum $level = IndicatorLevelEnum::PORTFOLIO;

    protected static function getLevel(): IndicatorLevelEnum
    {
        return static::$level;
    }

    protected static function isLevel(IndicatorLevelEnum $level): bool
    {
        return static::getLevel() === $level;
    }

    public static function form(Form $form): Form
    {
        return $form
            ->columns(1)
            ->schema([
                Section::make('Basic Information')
                    ->description('This is a system-generated compliance indicator.')
                    ->schema([
                        Forms\Components\Placeholder::make('system_generated_notice')
                            ->label('This compliance indicator is automatically generated by the system. It cannot be edited.')
                            ->content('It can be assigned to programmes and the acceptable threshold can be set in the programmes tab.')
                            ->columnSpanFull(),

                        Forms\Components\TextInput::make('title')
                            ->label('Indicator Title')
                            ->disabled()
                            ->dehydrated(false),

                        Forms\Components\TextInput::make('description')
                            ->label('Indicator Question')
                            ->disabled()
                            ->hidden() // RZP wanted this removed, but kept for future use
                            ->dehydrated(false),

                        Forms\Components\TextInput::make('response_format')
                            ->label('Response Format')
                            ->disabled()
                            ->dehydrated(false),
                    ])
                    ->visible(fn (?Model $record) => $record && $record?->type !== IndicatorComplianceTypeEnum::OTHER),
                Section::make('Basic Information')
                    ->description('What is the compliance indicator and who is responsible for it?')
                    ->schema([
                        Forms\Components\Select::make('responsible_role_id')
                            ->label('Responsible Role')
                            ->hint('Who is responsible for supplying the response and documentation?')
                            ->options(function () {
                                // Load roles so that slug gets appended
                                $roles = Role::all();

                                return $roles->whereIn('slug', config('success-compliance-indicators.responsible_roles'))->pluck('label', 'id');
                            })
                            ->required(),

                        IndicatorSharedFields::titleInput(),
                        IndicatorSharedFields::descriptionInput(),
                        IndicatorSharedFields::additionalInstructionsTextarea(),
                    ])
                    ->visible(fn (?Model $record) => ! $record || $record?->type === IndicatorComplianceTypeEnum::OTHER),
                Section::make('Response Definition')
                    ->description('How should the response be structured?')
                    ->columns(2)
                    ->schema([
                        IndicatorSharedFields::responseFormatSelect(),
                        IndicatorSharedFields::currencySelect(),
                        IndicatorSharedFields::currencyPlaceholder(),
                        IndicatorSharedFields::booleanAcceptanceToggle(),
                        IndicatorSharedFields::targetValueInput(),
                        IndicatorSharedFields::acceptanceValueInput(),
                        IndicatorSharedFields::supportingDocumentationCheckbox(),
                        IndicatorSharedFields::supportingDocumentationTextarea(),
                    ])
                    ->visible(fn (?Model $record) => ! $record || $record?->type === IndicatorComplianceTypeEnum::OTHER),
                Section::make('Verification')
                    ->description('Does this require verification?')
                    ->schema([
                        IndicatorSharedFields::requiresVerificationCheckbox(),
                        IndicatorSharedFields::verifier1Select(),
                        IndicatorSharedFields::verifier2Select(),
                    ])
                    ->visible(fn (?Model $record) => ! $record || $record?->type === IndicatorComplianceTypeEnum::OTHER),
            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->columns([
                Tables\Columns\TextColumn::make('title')
                    ->description(fn (IndicatorCompliance $record) => Str::limit($record->description, 50, '...'))
                    ->sortable()
                    ->searchable(),
                Tables\Columns\TextColumn::make('level')
                    ->label('Set By')
                    ->searchable()
                    ->formatStateUsing(fn (IndicatorLevelEnum $state) => $state->label())
                    ->color(fn (IndicatorCompliance $record) => $record->level === IndicatorLevelEnum::PORTFOLIO ? 'primary' : 'secondary')
                    ->badge()
                    ->alignCenter(),
                Tables\Columns\TextColumn::make('responsibleRole.label')
                    ->label('Responsible Role')
                    ->tooltip(function (IndicatorCompliance $record) {
                        if ($record->type === IndicatorComplianceTypeEnum::OTHER) {
                            return 'The role that is responsible for supplying the response and documentation for this indicator';
                        }
                    })
                    ->getStateUsing(function (IndicatorCompliance $record) {
                        if ($record->type === IndicatorComplianceTypeEnum::OTHER) {
                            return $record->responsibleRole->label;
                        } else {
                            return 'System';
                        }
                    })
                    ->color(function (IndicatorCompliance $record) {
                        if ($record->type === IndicatorComplianceTypeEnum::OTHER) {
                            return 'info';
                        } else {
                            return 'success';
                        }
                    })
                    ->sortable()
                    ->searchable()
                    ->alignCenter()
                    ->badge(),
                Tables\Columns\TextColumn::make('programmes_count')
                    ->label('Associated Programmes')
                    ->wrapHeader()
                    ->counts('programmes')
                    ->tooltip('The number of programmes that have this compliance indicator')
                    ->color('gray')
                    ->badge()
                    ->alignCenter()
                    ->sortable(),
                Tables\Columns\TextColumn::make('created_at')
                    ->label('Created At')
                    ->dateTime('H:i d/m/Y')
                    ->toggleable()
                    ->alignCenter()
                    ->wrap()
                    ->sortable(),
                Tables\Columns\TextColumn::make('updated_at')
                    ->label('Updated At')
                    ->dateTime('H:i d/m/Y')
                    ->toggleable()
                    ->alignCenter()
                    ->wrap()
                    ->sortable(),
            ])
            ->defaultSort('title', 'asc')
            ->filters([
                //
            ])
            ->recordUrl(function (IndicatorCompliance $record) {
                if ($record->level === static::getLevel()) {
                    return static::getUrl('edit', ['record' => $record]);
                } else {
                    return static::getUrl('view', ['record' => $record]);
                }
            })
            ->actions([
                Tables\Actions\ViewAction::make()
                    ->hidden(fn (IndicatorCompliance $record) => $record->level === static::getLevel())
                    ->tooltip(function (IndicatorCompliance $record) {
                        if ($record->level === IndicatorLevelEnum::PORTFOLIO) {
                            return 'You may only view this indicator becauses it was created in the Portfolio dashboard.';
                        } else {
                            return 'You may only view this indicator becauses it was created in the Parent Group dashboard.';
                        }
                    }),
                Tables\Actions\EditAction::make()
                    ->visible(fn (IndicatorCompliance $record) => $record->level === static::getLevel()),
                // TODO: Add delete action
            ]);
    }

    public static function getRelations(): array
    {
        return [
            ProgrammesRelationManager::class,
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListIndicatorCompliances::route('/'),
            'create' => Pages\CreateIndicatorCompliance::route('/create'),
            'view' => Pages\ViewIndicatorCompliance::route('/{record}'),
            'edit' => Pages\EditIndicatorCompliance::route('/{record}/edit'),
        ];
    }

    public static function getEloquentQuery(): Builder
    {
        return parent::getEloquentQuery()
            ->ofCurrentTenantPortfolioOrCluster()
            ->withoutGlobalScopes([
                SoftDeletingScope::class,
            ]);
    }
}
