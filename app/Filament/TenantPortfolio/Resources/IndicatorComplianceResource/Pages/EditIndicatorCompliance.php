<?php

namespace App\Filament\TenantPortfolio\Resources\IndicatorComplianceResource\Pages;

use App\Enums\IndicatorComplianceTypeEnum;
use App\Enums\IndicatorResponseFormatEnum;
use App\Filament\TenantPortfolio\Resources\IndicatorComplianceResource;
use Filament\Actions;
use Filament\Actions\Action;
use Filament\Actions\ActionGroup;
use Filament\Notifications\Notification;
use Filament\Resources\Pages\EditRecord;
use Illuminate\Contracts\Support\Htmlable;

class EditIndicatorCompliance extends EditRecord
{
    protected static string $resource = IndicatorComplianceResource::class;

    protected function getHeaderActions(): array
    {
        $actions = [];

        // Only show delete action for non-system-generated indicators
        if ($this->getRecord()->type === IndicatorComplianceTypeEnum::OTHER) {
            // TODO: add permission check
            $actions[] = Actions\DeleteAction::make();
        }

        return $actions;
    }

    public function getTitle(): string|Htmlable
    {
        return $this->getRecord()->title;
    }

    public function hasCombinedRelationManagerTabsWithContent(): bool
    {
        return true;
    }

    /**
     * @return array<Action | ActionGroup>
     */
    protected function getFormActions(): array
    {
        $actions = [];

        // Only show delete action for non-system-generated indicators
        if ($this->getRecord()->type === IndicatorComplianceTypeEnum::OTHER) {
            $actions[] = $this->getSaveFormAction();
            $actions[] = $this->getCancelFormAction();
        }

        return $actions;
    }

    protected function mutateFormDataBeforeFill(array $data): array
    {
        $data['requires_approval'] = $data['verifier_1_role_id'] !== null || $data['verifier_2_role_id'] !== null;
        $data['requires_supporting_documentation'] = $data['supporting_documentation'] !== null;

        // Handle boolean response format when filling the form
        if ($data['response_format'] === IndicatorResponseFormatEnum::BOOLEAN->value) {
            $data['boolean_acceptance_value'] = $data['acceptance_value'] === '1' || $data['acceptance_value'] === 'true';
        }

        return $data;
    }

    protected function mutateFormDataBeforeSave(array $data): array
    {
        // Only allow saving for non-system-generated indicators
        if ($this->getRecord()->type !== IndicatorComplianceTypeEnum::OTHER) {
            // For system-generated indicators, return the original data without changes
            Notification::make()
                ->title('System-generated indicators cannot be edited')
                ->body('This indicator is automatically generated by the system and cannot be edited.')
                ->danger()
                ->send();

            return $this->getRecord()->toArray();
        }

        // Handle boolean response format
        if ($data['response_format'] === IndicatorResponseFormatEnum::BOOLEAN->value) {
            // For boolean, set acceptance_value based on the toggle and clear target_value
            $data['acceptance_value'] = isset($data['boolean_acceptance_value']) && $data['boolean_acceptance_value'] ? '1' : '0';
            $data['target_value'] = null;
        }

        // Remove the temporary boolean field
        unset($data['boolean_acceptance_value']);

        return $data;
    }
}
